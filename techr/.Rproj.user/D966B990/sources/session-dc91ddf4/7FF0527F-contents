#Create a map of the united states showing the electoral college counts for each state from the 2024 presidential election
import geopandas as gpd

import matplotlib.pyplot as plt
# Load the US states shapefile

us_states = gpd.read_file(gpd.datasets.get_path('naturalearth_lowres'))
# Filter for the United States
us_states = us_states[us_states['name'] == 'United States of America']
# Create a dictionary with electoral college counts for each state
electoral_college_counts = {
    'Alabama': 9, 'Alaska': 3, 'Arizona': 11, 'Arkansas': 6, 'California': 54,
    'Colorado': 10, 'Connecticut': 7, 'Delaware': 3, 'Florida': 30, 'Georgia': 16,
    'Hawaii': 4, 'Idaho': 4, 'Illinois': 19, 'Indiana': 11, 'Iowa': 6,
    'Kansas': 6, 'Kentucky': 8, 'Louisiana': 8, 'Maine': 4, 'Maryland': 10,
    'Massachusetts': 11, 'Michigan': 15, 'Minnesota': 10, 'Mississippi': 6,
    'Missouri': 10, 'Montana': 4, 'Nebraska': 5, 'Nevada': 6, 'New Hampshire': 4,
    'New Jersey': 14, 'New Mexico': 5, 'New York': 28, 'North Carolina': 16,
    'North Dakota': 3, 'Ohio': 17, 'Oklahoma': 7, 'Oregon': 8, 'Pennsylvania': 19,
    'Rhode Island': 4, 'South Carolina': 9, 'South Dakota': 3, 'Tennessee': 11,
    'Texas': 40, 'Utah': 6, 'Vermont': 3, 'Virginia': 13, 'Washington': 12,
    'West Virginia': 4, 'Wisconsin': 10, 'Wyoming': 3
}
# Add electoral college counts to the GeoDataFrame
us_states['electoral_votes'] = us_states['name'].map(electoral_college_counts)
# Plot the map
fig, ax = plt.subplots(1, 1, figsize=(15, 10))
us_states.boundary.plot(ax=ax, linewidth=1)
us_states.plot(column='electoral_votes', ax=ax, legend=True,
               legend_kwds={'label': "Electoral Votes by State",
                            'orientation': "horizontal"},
               cmap='Blues', edgecolor='black')
plt.title('2024 Presidential Election Electoral College Counts by State')
plt.axis('off')
plt.show()
# Save the figure
fig.savefig('us_electoral_college_2024.png', dpi=300, bbox_inches='tight')
# Save the GeoDataFrame to a file
us_states.to_file('us_electoral_college_2024.geojson', driver='GeoJSON')
# Save the electoral college counts to a CSV file
import pandas as pd
electoral_df = pd.DataFrame(list(electoral_college_counts.items()), columns=['State', 'Electoral Votes'])
electoral_df.to_csv('electoral_college_counts_2024.csv', index=False)
# Print a message indicating that the files have been saved
print("Map and data files have been saved successfully.")
# This code creates a map of the United States showing the electoral college counts for each state from the 2024 presidential election.
# It uses the GeoPandas library to handle geographic data and Matplotlib for plotting.
     
# The map is saved as a PNG file, the GeoDataFrame is saved as a GeoJSON file, and the electoral college counts are saved as a CSV file.
# The map uses a blue color scheme to represent the number of electoral votes in each state.
# The code also prints a message indicating that the files have been saved successfully.
# The electoral college counts are based on the 2024 presidential election results.
# The map includes a legend that shows the electoral votes by state.
# The code filters the GeoDataFrame to include only the United States and adds a new column for electoral votes.
# The map is displayed with the state boundaries outlined in black.
# The figure is saved with a resolution of 300 DPI and tight bounding box to ensure the map is clear and well-formatted.
# The code uses the naturalearth_lowres dataset from GeoPandas, which contains low-resolution geometries of countries.
# The electoral college counts are hardcoded for the 2024 presidential election.
# The code is structured to be easily modified for future elections by changing the electoral_college_counts dictionary.
     
# The map can be used for educational purposes, political analysis, or general interest in the electoral process.
# The code is designed to be run in a Python environment with the necessary libraries installed.
# The map provides a visual representation of the distribution of electoral votes across the United States.
# The use of GeoPandas and Matplotlib allows for easy customization and enhancement of the map.
# The code is efficient and straightforward, making it accessible for users with basic programming knowledge.
# The final output includes a clear and informative map that can be shared or published.
# The code is well-commented to explain each step, making it easy to understand and modify.
# The map can be used in presentations, reports, or online platforms to illustrate the electoral college system.
# The code demonstrates the power of Python for data visualization and geographic analysis.
# The map can be further enhanced with additional features such as state names, population data, or historical electoral trends.
# The code is a complete solution for visualizing the electoral college counts in the United States for the 2024 presidential election.

# The map serves as a useful tool for understanding the electoral landscape of the United States.
# It can help users visualize how electoral votes are distributed across different states.
# The code can be adapted for other countries or regions by changing the shapefile and electoral data.
# The use of GeoPandas allows for easy manipulation and visualization of geographic data.
# The map can be used to analyze trends in electoral votes over time or compare different elections.
# The code is designed to be modular, allowing for easy updates and modifications.
# The map can be integrated into web applications or dashboards for interactive exploration.
# The code demonstrates best practices in data visualization, including clear labeling and color schemes.
# The map can be used to educate the public about the electoral college system and its implications for presidential elections.
# The code is a practical example of how to use Python for geographic data analysis and visualization.
# The map can be shared on social media or included in articles to engage a wider audience.
     
# The code is a valuable resource for educators, students, and anyone interested in the electoral process.
